openapi: 3.0.3
info:
  version: 1.0.0
  title: WASAPhoto
  description: |-
    Each user will be presented with a stream of photos (images) in reverse chronological order, with information about when each photo was uploaded (date and time) and how many likes and comments it has. The stream is composed by photos from “following” (other users that the user follows). Users can place (and later remove) a “like” to photos from other users. Also, users can add comments to any image (even those uploaded by themself). Only authors can remove their comments. 
    
    Users can ban other users. If user Alice bans user Eve, Eve won’t be able to see any information about Alice. Alice can decide to remove the ban at any moment. 
    
    Users will have their profiles. The personal profile page for the user shows: the user’s photos (in reverse chronological order), how many photos have been uploaded, and the user’s followers and following. Users can change their usernames, upload photos, remove photos, and follow/unfollow other users. Removal of an image will also remove likes and comments. 
    
    A user can search other user profiles via username. 
    
    A user can log in just by specifying the username.
  
  contact:
    name: Michelangelo Crea
    email: crea.1993024@studenti.uniroma1.it
    url: https://github.com/mikusander
    
tags:
  - name: "login"
    description: "Endpoints for logging in"
  - name: "User"
    description: "User Name specification"
  - name: "Photo"
    description: "photo specification"
  - name: "follow"
    description: "add a follow to a user"
  - name: "ban"
    description: "ban a user"
  - name: "like"
    description: "like of the user on a photo"
  - name: "comment"
    description: "comment of the user on a photo"


paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema: 
              description: User username
              type: object
              properties:
                name:
                  description: User username
                  type: string
                  example: Maria
                  pattern: '^.*?$'
                  minLength: 3
                  maxLength: 16
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                description: User identifier
                type: object
                properties:
                  identifier:
                    description: The user numeric indentifier
                    type: integer
                    example: 1


  /users/{user_name}/username:
    parameters:
      - name: user_name
        in: path
        required: true
        description: user username
        schema: {$ref: "#/components/schemas/User/properties/username"}
    put:
      security:
        - bearerAuth : []
      tags: 
        - User
      summary: Set username
      operationId: setMyUserName
      description: |-
        update a username of the user that can viewed in the app
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/User" }
      responses:
        "200":
          description: username set good
          content:
            application/json: 
              schema: { $ref: "#/components/schemas/User" }
        "400": { $ref: '#/components/responses/BadRequest' }
        "500": { $ref: "#/components/responses/InternalServerError" }


  /users/{username}/photo:
    parameters:
      - name: username
        in: path
        required: true
        description: user username
        schema: {$ref: "#/components/schemas/User/properties/username"}

    post:
      security:
        - bearerAuth : []
      tags:
        - Photo
      summary: Upload photo
      operationId: uploadPhoto
      description: |-
        Upload a new photo. The server create a new unique ID, the client can find in in the response.
      requestBody:
        content:
          image/*:
            schema: { $ref: "#/components/schemas/post_photo" }
      responses:
        "201":
          description: Photo upload successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/post_photo" }

  /users/{username}/follow/{followid}:
    parameters: 
      - name: username
        in: path
        required: true
        description: user username
        schema: {$ref: "#/components/schemas/User/properties/username"}
      - name: followid
        in: path
        required: true
        description: follow user username
        schema: {$ref: "#/components/schemas/User/properties/username"}

    put:
      security:
        - bearerAuth: []
      tags: 
        - follow
      summary: Follow user
      description: |
        this endpoint is used to follow another user.
      operationId: followUser
      responses:
        "200":
          description: follow user successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/follow" }
        "400": { $ref: '#/components/responses/BadRequest' }
        "500": { $ref: "#/components/responses/InternalServerError" }
    
    delete:
      security:
        - bearerAuth: []
      tags: 
        - follow
      summary: unfollow user
      description: |
        this endppoint is used to unfollow a user
      operationId: unfollowUser
      responses:
        "204":
          description: unfollow user successfully
        "400": { $ref: '#/components/responses/BadRequest' }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /users/{username}/ban/{banid}:
    parameters: 
      - name: username
        in: path
        required: true
        description: User username
        schema: {$ref: "#/components/schemas/User/properties/username"}
      - name: banid
        in: path
        required: true
        description: user username to ban
        schema: {$ref: "#/components/schemas/User/properties/username"}

    put:
      security:
        - bearerAuth: []
      tags: 
        - ban
      summary: Ban user
      description: |
        This endpoint is used to ban a user.
      operationId: banUser
      responses:
        "200":
          description: ban user successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ban" }
        "400": { $ref: '#/components/responses/BadRequest' }
        "500": { $ref: "#/components/responses/InternalServerError" }

    delete:
      security:
        - bearerAuth: []
      tags: 
        - ban
      summary: Unban user
      description: |
        This endpoint is used to unban a user.
      operationId: unbanUser
      responses:
        "204":
          description: user unban successfully
        "400": { $ref: '#/components/responses/BadRequest' }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /users/{username}/photo/{photoid}/like/{likeid}:
    parameters: 
      - name: username
        in: path
        required: true
        description: user username
        schema: {$ref: "#/components/schemas/User/properties/username"}
      - name: photoid
        in: path
        required: true
        description: id photo to be able to been a like
        schema: {$ref: '#/components/schemas/post_photo/properties/id'}
      - name: likeid
        in: path
        required: true
        description: user username that receives like
        schema: {$ref: "#/components/schemas/User/properties/username"}

    put:
      security:
        - bearerAuth: []
      tags: 
        - like
      summary: Like photo
      description: |
        This endpoint is used to put like.
      operationId: likePhoto
      responses:
        "200":
          description: like photo successful
          content:
            application/json:
              schema: { $ref: "#/components/schemas/like" }
        "400": { $ref: '#/components/responses/BadRequest' }
        "500": { $ref: "#/components/responses/InternalServerError" }
   
    delete:
      security:
        - bearerAuth: []
      tags: 
        - like
      summary: Unlike photo
      description: |
        This endpoint is used to unlike a photo
      operationId: unlikePhoto
      responses:
        "204":
          description: Like removed
        "400": { $ref: '#/components/responses/BadRequest' }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /users/{username}/photo/{photoid}/comment:
    parameters: 
      - name: username
        in: path
        required: true
        description: user username
        schema: {$ref: "#/components/schemas/User/properties/username"}
      - name: photoid
        in: path
        required: true
        description: photo id
        schema: {$ref: '#/components/schemas/post_photo/properties/id'}
    post:
      security:
        - bearerAuth: []
      tags: 
        - comment
      summary: comment photo
      description: |
        This endpoint is used to put a comment to a photo
      operationId: commentPhoto
      requestBody: 
        content:
          application/json: 
            schema:
              { $ref: "#/components/schemas/comment" }
      responses:
        "201":
          description: photo comment successful
          content:
            application/json:
              schema: { $ref: "#/components/schemas/comment" }
        "400": { $ref: '#/components/responses/BadRequest' }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /users/{username}/photo/{photoid}/comment/{commentid}:
    parameters: 
      - name: username
        in: path
        required: true
        description: User username
        schema: {$ref: "#/components/schemas/User/properties/username"}
      - name: photoid
        in: path
        required: true
        description: photo id
        schema: {$ref: '#/components/schemas/post_photo/properties/id'}
      - name: commentid
        in: path
        required: true
        description: comment id
        schema: {$ref: "#/components/schemas/comment/properties/id"}
          
    delete:
      security:
        - bearerAuth: []
      tags: 
        - comment
      summary: uncomment photo
      description: |
        This endpoint is used to remove a comment.
      operationId: uncommentPhoto
      responses:
        "204":
          description: the comment is removed
        "400": { $ref: '#/components/responses/BadRequest' }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /users/{username}/photo/{photoid}:
    parameters: 
      - name: username
        in: path
        required: true
        description: User username
        schema: {$ref: "#/components/schemas/User/properties/username"}
      - name: photoid
        in: path
        required: true
        description: photo id
        schema: {$ref: "#/components/schemas/post_photo/properties/id"}

    delete:
      security:
        - bearerAuth: []
      tags: 
        - Photo
      summary: remove photo
      description: |
        This endpoint is used to delete a photo.
      operationId: deletePhoto
      responses:
        "204":
          description: Photo removed
        "400": { $ref: '#/components/responses/BadRequest' }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /users/{username}/profile:
    parameters: 
      - name: username
        in: path
        required: true
        description: user username
        schema: {$ref: "#/components/schemas/User/properties/username"}
    get:
      security:
        - bearerAuth: []
      tags: 
        - User
      summary: return profile
      operationId: getUserProfile
      description: return the user profile. In the user profile there are a number of follow, numer of following, number of photo, and a list of user photo.
      responses:
        "200": 
          description: User profile retrived.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/user_profile'
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /users/{username}/stream:
    parameters: 
      - name: username
        in: path
        required: true
        description: user username
        schema: {$ref: "#/components/schemas/User/properties/username"}
    get:
      security:
        - bearerAuth: []
      tags: 
        - User
      summary: return stream
      operationId: getMyStream
      description: return the user profile. In the user profile there are a number of follow, numer of following, number of photo, and a list of user photo.
      responses:
        "200": 
          description: Stream retrived.
          content:
            application/json:
              schema: 
               { $ref: '#/components/schemas/stream' }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  responses: 
    UnauthorizedError:
      description: Access token is missing or invalid
    BadRequest:
      description: The request was not compliant with the documentation (eg. missing fields, etc).
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs.

  schemas:
    User:
      title: User
      description: This object represent a single User.
      type: object
      properties:
        id: 
          description: Unique User identifier.
          type: string
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          example: cj3kl
          readOnly: true 
        username:
          description: Name of the user in the platform
          type: string
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          example: MarioRossi61
    
    like:
      title: like
      description: this object represent a like of the user
      type: object
      properties:
        personal_user_id:
          description: unique personal ID
          type: string
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          example: cj3kl
        owner_photo:
          description: unique personal ID
          type: string
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          example: cj3kl
        photo_id:
          description: unique photo ID
          type: string
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          example: cj3kl

    comment:
      title: comment
      description: this object represent a comment of the user
      type: object
      properties:
        id:
          description: unique follow identifier
          type: string
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          readOnly: true
          example: cj3kl
        text:
          description: text of the comment
          type: string
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          example: cj3kl
        personal_user_id:
          description: unique personal ID
          type: string
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          example: cj3kl
        owner_photo:
          description: unique personal ID
          type: string
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          example: cj3kl
        photo_id:
          description: unique photo ID
          type: string
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          example: cj3kl
        date:
          description: date of the comment
          type: string
          format: date-time
          example: "2023-11-25T00:00:00Z"
          minLength: 0
          maxLength: 20

    stream:
      title: stream
      description: see the home page of the user 
      type: object
      properties:
        username:
          description: user username
          type: string
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          example: cj3kl
        list_photos:
          description: list of user photo
          type: array
          items:
            {$ref: '#/components/schemas/post_photo'}
          minItems: 0
          maxItems: 1000

    user_profile:
      title: user profile
      description: see the user profile
      type: object
      properties:
        num_follow:
          description: number of people following the user
          type: integer
          example: 40
        num_following:
          description: number of people the user follows
          type: integer
          example: 40
        num_photo_upload:
          description: number of the use photo upload
          type: integer
          example: 40
        list_photos:
          description: list of user photo
          type: array
          items:
            {$ref: '#/components/schemas/post_photo'}
          minItems: 0
          maxItems: 1000

    ban:
      title: ban
      description: "this object represent a ban user"
      type: object
      properties:
        personal_user_id:
          description: unique personal ID
          type: string
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          example: cj3kl
        ban_user_id:
          description: unique follow ID
          type: string
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          example: cj3kl

    follow:
      title: follow
      description: "this object represent a follow user"
      type: object
      properties:
        personal_user_id:
          description: unique personal ID
          type: string
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          example: cj3kl
        follow_user_id:
          description: unique follow ID
          type: string
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          example: cj3kl

    post_photo:
      title: Photo
      description: "this object represent a single photo"
      type: object
      properties:
        id:
          description: unique photo identifier
          type: string
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          readOnly: true
          example: cj3kl
        date:
          description: date of the comment
          type: string
          format: date-time
          example: "2023-11-25T00:00:00Z"
          minLength: 0
          maxLength: 20
        num_like:
          description: number of photo like
          type: integer
          example: 40
        num_comment:
          description: number of photo comments
          type: integer
          example: 40
        text:
          description: description of the photo

        photo:
          description: photo post
          type: string
          format: binary
          minLength: 3
          maxLength: 40000000